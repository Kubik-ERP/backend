generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model business_owner {
  id                        String                      @id @db.Uuid
  name                      String?                     @db.VarChar(45)
  email                     String?                     @unique(map: "email_unique") @db.VarChar(45)
  password                  String?                     @db.VarChar(45)
  address                   String?                     @db.VarChar(45)
  business_owner_has_stores business_owner_has_stores[]
  payments                  payments[]
}

model business_owner_has_stores {
  business_owner_id String         @db.Uuid
  stores_id         String         @db.Uuid
  business_owner    business_owner @relation(fields: [business_owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_business_owner_has_stores_business_owner1")
  stores            stores         @relation(fields: [stores_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_business_owner_has_stores_stores1")

  @@id([business_owner_id, stores_id])
  @@index([business_owner_id], map: "fk_business_owner_has_stores_business_owner1_idx")
  @@index([stores_id], map: "fk_business_owner_has_stores_stores1_idx")
}

model cash_drawer_transactions {
  id              String  @id(map: "cash_drawer_transactions_pk") @db.Uuid
  cash_drawers_id String  @db.Uuid
  amount_out      BigInt
  type            Int
  created_by      BigInt?
  created_at      BigInt?
  amount_in       Int?
  final_amount    Int?
}

model cash_drawers {
  id               String            @id(map: "cash_drawers_pk") @db.Uuid
  expected_balance Float?
  actual_balance   Float?
  status           cash_drawer_type?
  date             DateTime?         @db.Date
  notes            String?           @db.VarChar(45)
  created_by       BigInt?
  created_at       BigInt?
  updated_by       BigInt?
  updated_at       BigInt?
  store_id         String?           @db.Uuid
  closed_at        BigInt?
  closed_by        BigInt?
  staff_id         String?           @db.Uuid
  stores           stores?           @relation(fields: [store_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "cash_drawers_stores_fk")
}

model categories {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  category                String?                   @unique(map: "categories_name_key") @db.VarChar(45)
  description             String?                   @db.VarChar(45)
  picture_url             String?                   @db.VarChar(45)
  categories_has_products categories_has_products[]
}

model categories_has_products {
  categories_id String     @db.Uuid
  products_id   String     @db.Uuid
  categories    categories @relation(fields: [categories_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_categories_has_products_categories1")
  products      products   @relation(fields: [products_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_categories_has_products_products1")

  @@id([categories_id, products_id])
  @@index([categories_id], map: "fk_categories_has_products_categories1_idx")
  @@index([products_id], map: "fk_categories_has_products_products1_idx")
}

model charges {
  id                                         String            @id(map: "charges_pk") @db.Uuid
  name                                       String            @db.VarChar
  type                                       charge_type
  percentage                                 Decimal           @db.Decimal(2, 2)
  is_include                                 Boolean           @default(false)
  applied_to_takeaway                        Boolean           @default(true)
  is_enabled                                 Boolean           @default(true)
  invoice_invoice_tax_idTocharges            invoice[]         @relation("invoice_tax_idTocharges")
  invoice_invoice_service_charge_idTocharges invoice[]         @relation("invoice_service_charge_idTocharges")
  invoice_charges                            invoice_charges[]
}

model customer {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String?                  @db.VarChar(45)
  code                   String?                  @db.VarChar(45)
  number                 String?                  @db.VarChar
  dob                    DateTime?                @db.Date
  email                  String?                  @db.VarChar(45)
  username               String?                  @db.VarChar(45)
  address                String?                  @db.VarChar(45)
  gender                 String?                  @db.VarChar(45)
  point                  Int?
  tag                    String?                  @db.VarChar(45)
  customer_has_stores    customer_has_stores[]
  customers_has_invoices customers_has_invoices[]
  customers_has_tag      customers_has_tag[]
  invoice                invoice[]
}

model customer_has_stores {
  customer_id String   @db.Uuid
  stores_id   String   @db.Uuid
  customer    customer @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_customer_has_stores_customer1")
  stores      stores   @relation(fields: [stores_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_customer_has_stores_stores1")

  @@id([customer_id, stores_id])
  @@index([customer_id], map: "fk_customer_has_stores_customer1_idx")
  @@index([stores_id], map: "fk_customer_has_stores_stores1_idx")
}

model customers_has_invoices {
  customers_id String   @db.Uuid
  invoices_id  String   @db.Uuid
  customer     customer @relation(fields: [customers_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_customers_has_invoices_customer")
  invoice      invoice  @relation(fields: [invoices_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_customers_has_invoices_invoice")

  @@id([customers_id, invoices_id], map: "pk_customers_has_invoices")
}

model customers_has_tag {
  customer_id String   @db.Uuid
  tag_id      String   @db.Uuid
  customer    customer @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "customers_has_tag_customer_id_fk")
  tag         tag      @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "customers_has_tag_tag_id_fk")

  @@id([customer_id, tag_id])
}

model employees {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                    String?                   @db.VarChar(45)
  email                   String?                   @unique @db.VarChar(45)
  phone_number            String?                   @db.VarChar(45)
  profile_url             String?                   @db.VarChar(45)
  start_date              DateTime?                 @db.Date
  end_date                DateTime?                 @db.Date
  gender                  gender?
  employees_has_roles     employees_has_roles[]
  employees_shift         employees_shift[]
  platforms_has_employees platforms_has_employees[]
  product_commissions     product_commissions[]
  stores_has_employees    stores_has_employees[]
  voucher_commissions     voucher_commissions[]
}

model employees_has_roles {
  staffs_id String    @db.Uuid
  roles_id  String    @db.Uuid
  roles     roles     @relation(fields: [roles_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_staffs_has_roles_roles1")
  employees employees @relation(fields: [staffs_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_staffs_has_roles_staffs")

  @@id([staffs_id, roles_id])
  @@index([roles_id], map: "fk_staffs_has_roles_roles1_idx")
  @@index([staffs_id], map: "fk_staffs_has_roles_staffs_idx")
}

model employees_shift {
  id           String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  start_time   DateTime? @db.Time(6)
  end_time     DateTime? @db.Time(6)
  days         Int?
  employees_id String    @db.Uuid
  employees    employees @relation(fields: [employees_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_employees_shift_employees1")

  @@id([id, employees_id])
  @@index([employees_id], map: "fk_employees_shift_employees1_idx")
}

model floor {
  id           String   @id @db.Uuid
  floor_number String?  @db.VarChar(45)
  tables       tables[]
}

model invoice {
  id                                         String                   @id @db.Uuid
  payment_methods_id                         String?                  @db.Uuid
  customer_id                                String                   @db.Uuid
  discount_amount                            Float?
  table_code                                 String?                  @db.VarChar(45)
  payment_status                             invoice_type?
  created_at                                 DateTime?                @db.Timestamp(6)
  update_at                                  DateTime?                @db.Timestamp(6)
  delete_at                                  DateTime?                @db.Timestamp(6)
  subtotal                                   Float
  order_type                                 order_type?
  paid_at                                    DateTime?                @db.Timestamp(6)
  tax_id                                     String?                  @db.Uuid
  service_charge_id                          String?                  @db.Uuid
  tax_amount                                 Float?
  service_charge_amount                      Float?
  grand_total                                Float?
  cashier_id                                 Int?
  invoice_number                             String?                  @db.VarChar(100)
  customers_has_invoices                     customers_has_invoices[]
  customer                                   customer                 @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_invoice_customer1")
  payment_methods                            payment_methods?         @relation(fields: [payment_methods_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_invoice_payment_methods1")
  charges_invoice_tax_idTocharges            charges?                 @relation("invoice_tax_idTocharges", fields: [tax_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "invoice_charges_fk")
  charges_invoice_service_charge_idTocharges charges?                 @relation("invoice_service_charge_idTocharges", fields: [service_charge_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "invoice_charges_fk_1")
  users                                      users?                   @relation(fields: [cashier_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "invoice_users_fk")
  invoice_charges                            invoice_charges[]
  invoice_details                            invoice_details[]
  invoice_has_stores                         invoice_has_stores[]

  @@index([customer_id], map: "fk_invoice_customer1_idx")
  @@index([payment_methods_id], map: "fk_invoice_payment_methods1_idx")
}

model invoice_charges {
  invoice_id String  @db.Uuid
  charge_id  String  @db.Uuid
  percentage Decimal @db.Decimal(2, 2)
  amount     Decimal @db.Decimal(12, 2)
  is_include Boolean
  charges    charges @relation(fields: [charge_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "invoice_charges_charges_fk")
  invoice    invoice @relation(fields: [invoice_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "invoice_charges_invoice_fk")

  @@unique([invoice_id, charge_id], map: "invoice_charges_unique")
}

model invoice_details {
  id            String    @db.Uuid
  product_id    String?   @db.Uuid
  product_price Float?
  variant_id    String?   @db.Uuid
  notes         String?   @db.VarChar(45)
  qty           Int?
  invoice_id    String    @db.Uuid
  variant_price Float?
  invoice       invoice   @relation(fields: [invoice_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_invoice_details_invoice1")
  products      products? @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "invoice_details_products_fk")
  variant       variant?  @relation(fields: [variant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "invoice_details_variant_fk")

  @@id([id, invoice_id])
  @@index([invoice_id], map: "fk_invoice_details_invoice1_idx")
}

model invoice_has_stores {
  invoice_id String  @db.Uuid
  stores_id  String  @db.Uuid
  invoice    invoice @relation(fields: [invoice_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_invoice_has_stores_invoice1")
  stores     stores  @relation(fields: [stores_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_invoice_has_stores_stores1")

  @@id([invoice_id, stores_id])
  @@index([invoice_id], map: "fk_invoice_has_stores_invoice1_idx")
  @@index([stores_id], map: "fk_invoice_has_stores_stores1_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model invoice_settings {
  id                             Int     @id(map: "invoice_settings_pk") @default(autoincrement())
  store_id                       String  @unique(map: "invoice_settings_unique") @db.Uuid
  uid                            Int?
  company_logo_url               String?
  footer_text                    String?
  is_automatically_print_receipt Boolean @default(false)
  is_automatically_print_kitchen Boolean @default(false)
  is_automatically_print_table   Boolean @default(false)
  is_show_company_logo           Boolean @default(false)
  is_show_store_location         Boolean @default(false)
  is_hide_cashier_name           Boolean @default(false)
  is_hide_order_type             Boolean @default(false)
  is_hide_queue_number           Boolean @default(false)
  is_show_table_number           Boolean @default(false)
  is_hide_item_prices            Boolean @default(false)
  is_show_footer                 Boolean @default(false)
  increment_by                   Int?
  reset_sequence                 String?
  starting_number                Int?
}

model material {
  id                String              @id @db.Uuid
  name              String?             @db.VarChar(45)
  material_has_unit material_has_unit[]
  recipe_details    recipe_details[]
}

model material_has_unit {
  material_id String   @db.Uuid
  unit_id     String   @db.Uuid
  multiply    Float?
  material    material @relation(fields: [material_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_material_has_unit_material1")
  unit        unit     @relation(fields: [unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_material_has_unit_unit1")

  @@id([material_id, unit_id])
  @@index([material_id], map: "fk_material_has_unit_material1_idx")
  @@index([unit_id], map: "fk_material_has_unit_unit1_idx")
}

model operational_hours {
  id         BigInt  @default(autoincrement())
  days       Int?
  open_time  String?
  close_time String?
  stores_id  String  @db.Uuid
  stores     stores  @relation(fields: [stores_id], references: [id], onDelete: Cascade, map: "operational_hours_stores_fk")

  @@id([id, stores_id])
  @@unique([days, stores_id], map: "operational_hours_unique")
  @@index([stores_id], map: "fk_operational_hours_stores1_idx")
}

model payment_logs {
  id            String    @id(map: "payment_logs_pk") @db.Uuid
  service_name  String?   @db.VarChar
  url           String?   @db.VarChar
  method        String?   @db.VarChar
  request_body  String?
  response_body String?
  status_code   Int?
  created_at    DateTime? @db.Timestamp(6)
}

model payment_methods {
  id           String    @id @db.Uuid
  name         String?   @db.VarChar(45)
  icon_name    String?   @db.VarChar
  sort_no      Int?      @unique
  is_available Boolean   @default(true)
  invoice      invoice[]
}

model payments {
  id                String         @db.Uuid
  amount            Float?
  due_date          DateTime?      @db.Date
  status            payment_type?
  business_owner_id String         @db.Uuid
  business_owner    business_owner @relation(fields: [business_owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_payments_business_owner1")

  @@id([id, business_owner_id])
  @@index([business_owner_id], map: "fk_payments_business_owner1_idx")
}

model permissions {
  id               String             @id @db.Uuid
  name             String?            @db.VarChar(45)
  role_permissions role_permissions[]
}

model platforms {
  id                      String                    @id @db.Uuid
  name                    String?                   @db.VarChar(45)
  platforms_has_employees platforms_has_employees[]
}

model platforms_has_employees {
  platforms_id String    @db.Uuid
  employees_id String    @db.Uuid
  username     String?   @db.VarChar(45)
  employees    employees @relation(fields: [employees_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_platforms_has_employees_employees1")
  platforms    platforms @relation(fields: [platforms_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_platforms_has_employees_platforms1")

  @@id([platforms_id, employees_id])
  @@index([employees_id], map: "fk_platforms_has_employees_employees1_idx")
  @@index([platforms_id], map: "fk_platforms_has_employees_platforms1_idx")
}

model product_commissions {
  employees_id String    @db.Uuid
  products_id  String    @db.Uuid
  is_percent   Boolean?
  amount       Float?
  employees    employees @relation(fields: [employees_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_employees_has_items_employees1")
  products     products  @relation(fields: [products_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_employees_has_items_items1")

  @@id([employees_id, products_id])
  @@index([employees_id], map: "fk_employees_has_items_employees1_idx")
  @@index([products_id], map: "fk_employees_has_items_items1_idx")
}

model products {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                    String?                   @db.VarChar(45)
  price                   Float?
  discount_price          Float?
  picture_url             String?                   @db.VarChar(45)
  is_percent              Boolean?                  @default(false)
  categories_has_products categories_has_products[]
  invoice_details         invoice_details[]
  product_commissions     product_commissions[]
  recipe                  recipe[]
  stores_has_products     stores_has_products[]
  variant_has_products    variant_has_products[]
  voucher_has_products    voucher_has_products[]
}

model recipe {
  id             String           @unique(map: "id_unique") @db.Uuid
  recipe_code    String?          @unique(map: "recipe_code_unique") @db.VarChar(45)
  instructions   String?
  products_id    String           @db.Uuid
  products       products         @relation(fields: [products_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_recipe_products1")
  recipe_details recipe_details[]

  @@id([id, products_id])
  @@index([products_id], map: "fk_recipe_products1_idx")
}

model recipe_details {
  id          String   @db.Uuid
  quantity    Float?
  recipe_id   String   @db.Uuid
  material_id String   @db.Uuid
  material    material @relation(fields: [material_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_recipe_details_material1")
  recipe      recipe   @relation(fields: [recipe_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_recipe_details_recipe1")

  @@id([id, recipe_id, material_id])
  @@index([material_id], map: "fk_recipe_details_material1_idx")
  @@index([recipe_id], map: "fk_recipe_details_recipe1_idx")
}

model role_permissions {
  roles_id       String      @db.Uuid
  permissions_id String      @db.Uuid
  permissions    permissions @relation(fields: [permissions_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_roles_has_permissions_permissions1")
  roles          roles       @relation(fields: [roles_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_roles_has_permissions_roles1")

  @@id([roles_id, permissions_id])
  @@index([permissions_id], map: "fk_roles_has_permissions_permissions1_idx")
  @@index([roles_id], map: "fk_roles_has_permissions_roles1_idx")
}

model roles {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String?               @db.VarChar(45)
  employees_has_roles employees_has_roles[]
  role_permissions    role_permissions[]
  users               users[]
}

model stores {
  id                        String                      @id @db.Uuid
  name                      String?                     @db.VarChar(45)
  address                   String?                     @db.VarChar(255)
  phone_number              String?                     @db.VarChar(45)
  photo                     String?                     @db.VarChar(45)
  city                      String?                     @db.VarChar(45)
  postal_code               String?                     @db.VarChar(45)
  building                  String?                     @db.VarChar(45)
  email                     String                      @db.VarChar(255)
  business_type             String                      @db.VarChar(50)
  created_at                DateTime?                   @default(now()) @db.Timestamp(6)
  updated_at                DateTime?                   @default(now()) @db.Timestamp(6)
  business_owner_has_stores business_owner_has_stores[]
  cash_drawers              cash_drawers[]
  customer_has_stores       customer_has_stores[]
  invoice_has_stores        invoice_has_stores[]
  operational_hours         operational_hours[]
  stores_has_employees      stores_has_employees[]
  stores_has_products       stores_has_products[]
  user_has_stores           user_has_stores[]
}

model stores_has_employees {
  stores_id    String    @db.Uuid
  employees_id String    @db.Uuid
  employees    employees @relation(fields: [employees_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_stores_has_employees_employees1")
  stores       stores    @relation(fields: [stores_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_stores_has_employees_stores1")

  @@id([stores_id, employees_id])
  @@index([employees_id], map: "fk_stores_has_employees_employees1_idx")
  @@index([stores_id], map: "fk_stores_has_employees_stores1_idx")
}

model stores_has_products {
  stores_id   String   @db.Uuid
  products_id String   @db.Uuid
  products    products @relation(fields: [products_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_stores_has_products_products1")
  stores      stores   @relation(fields: [stores_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_stores_has_products_stores1")

  @@id([stores_id, products_id])
  @@index([products_id], map: "fk_stores_has_products_products1_idx")
  @@index([stores_id], map: "fk_stores_has_products_stores1_idx")
}

model tables {
  id         Int
  table_code String? @db.VarChar(45)
  capacity   Int?
  floor_id   String  @db.Uuid
  floor      floor   @relation(fields: [floor_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tables_floor1")

  @@id([id, floor_id])
  @@index([floor_id], map: "fk_tables_floor1_idx")
}

model tag {
  id                String              @id(map: "tag_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String?             @db.VarChar(255)
  customers_has_tag customers_has_tag[]
}

model unit {
  id                String              @id @db.Uuid
  name              String?             @db.VarChar(45)
  material_has_unit material_has_unit[]
}

model user_has_stores {
  id       BigInt @id(map: "user_has_stores_pk") @default(autoincrement())
  user_id  Int
  store_id String @db.Uuid
  stores   stores @relation(fields: [store_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_store")
  users    users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
}

model users {
  id              Int               @id(map: "users_pk") @unique(map: "users_id_idx") @default(autoincrement())
  username        String?           @db.VarChar
  email           String            @unique(map: "users_unique") @db.VarChar
  password        String            @db.VarChar
  phone           String            @default(dbgenerated("0")) @db.VarChar
  ext             Int               @default(62)
  created_at      BigInt?
  updated_at      BigInt?
  verified_at     BigInt?
  deleted_at      BigInt?
  pin             String?           @db.VarChar
  fullname        String?           @db.VarChar
  role_id         String            @db.Uuid
  invoice         invoice[]
  user_has_stores user_has_stores[]
  roles           roles             @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_roles_fk")
}

model users_token {
  id         Int     @id(map: "users_token_pk") @default(autoincrement())
  token      String  @unique(map: "users_token_unique")
  expired_at BigInt
  user_id    Int
  type       String? @db.VarChar
  created_at BigInt?
  updated_at BigInt?
}

model variant {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String?                @db.VarChar(45)
  price                Float?                 @default(0)
  invoice_details      invoice_details[]
  variant_has_products variant_has_products[]
}

model variant_has_products {
  variant_id  String   @db.Uuid
  products_id String   @db.Uuid
  products    products @relation(fields: [products_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_variant_has_products_products1")
  variant     variant  @relation(fields: [variant_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_variant_has_products_variant1")

  @@id([variant_id, products_id])
  @@index([products_id], map: "fk_variant_has_products_products1_idx")
  @@index([variant_id], map: "fk_variant_has_products_variant1_idx")
}

model voucher {
  id                   String                 @id @db.Uuid
  name                 String?                @db.VarChar(45)
  amount               Float?
  min_price            Float?
  promo_code           String?                @db.VarChar(45)
  start_period         DateTime?              @db.Date
  end_period           DateTime?              @db.Date
  quota                Int?
  is_percent           Boolean?
  voucher_commissions  voucher_commissions[]
  voucher_has_products voucher_has_products[]
}

model voucher_commissions {
  voucher_id   String    @db.Uuid
  employees_id String    @db.Uuid
  amount       Float?
  is_percent   Boolean?
  employees    employees @relation(fields: [employees_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_voucher_has_employees_employees1")
  voucher      voucher   @relation(fields: [voucher_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_voucher_has_employees_voucher1")

  @@id([voucher_id, employees_id])
  @@index([employees_id], map: "fk_voucher_has_employees_employees1_idx")
  @@index([voucher_id], map: "fk_voucher_has_employees_voucher1_idx")
}

model voucher_has_products {
  voucher_id  String   @db.Uuid
  products_id String   @db.Uuid
  products    products @relation(fields: [products_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_voucher_has_products_products1")
  voucher     voucher  @relation(fields: [voucher_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_voucher_has_products_voucher1")

  @@id([voucher_id, products_id])
  @@index([products_id], map: "fk_voucher_has_products_products1_idx")
  @@index([voucher_id], map: "fk_voucher_has_products_voucher1_idx")
}

enum cash_drawer_type {
  open
  close
}

enum charge_type {
  tax
  service
}

enum gender {
  male
  female
}

enum invoice_type {
  paid
  unpaid
  refund
}

enum order_type {
  take_away
  dine_in
  self_order
}

enum payment_type {
  pending
  paid
  overdue
}

enum transaction_type {
  sale
  cash_out
  cash_in
  opening_balance
  cash_refund
}
